// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AsciiDocNet.Tests.Specifications
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CrossReferencesFeature : object, Xunit.IClassFixture<CrossReferencesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CrossReferences.feature"
#line hidden
        
        public CrossReferencesFeature(CrossReferencesFeature.FixtureData fixtureData, AsciiDocNet_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Specifications", "Cross References", "  In order to create links to other sections\r\n  As a writer\r\n  I want to be able " +
                    "to use a cross reference macro", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a cross reference from an AsciiDoc cell to a section", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Cross References")]
        [Xunit.TraitAttribute("Description", "Create a cross reference from an AsciiDoc cell to a section")]
        public virtual void CreateACrossReferenceFromAnAsciiDocCellToASection()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a cross reference from an AsciiDoc cell to a section", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
  testRunner.Given("the AsciiDoc source", "|===\r\na|See <<_install>>\r\n|===\r\n\r\n== Install\r\n\r\nInstructions go here.", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
  testRunner.When("it is converted to html", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
  testRunner.Then("the result should match the HTML source", @"table.tableblock.frame-all.grid-all.spread
  colgroup
    col style='width: 100%;'
  tbody
    tr
      td.tableblock.halign-left.valign-top
        div
          .paragraph: p
            'See
            a href='#_install' Install
.sect1
  h2#_install Install
  .sectionbody
    .paragraph: p Instructions go here.", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a cross reference using the target section title", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Cross References")]
        [Xunit.TraitAttribute("Description", "Create a cross reference using the target section title")]
        public virtual void CreateACrossReferenceUsingTheTargetSectionTitle()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a cross reference using the target section title", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
  testRunner.Given("the AsciiDoc source", "== Section One\r\n\r\ncontent\r\n\r\n== Section Two\r\n\r\nrefer to <<Section One>>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
  testRunner.When("it is converted to html", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
  testRunner.Then("the result should match the HTML source", ".sect1\r\n  h2#_section_one Section One\r\n  .sectionbody: .paragraph: p content\r\n.se" +
                        "ct1\r\n  h2#_section_two Section Two\r\n  .sectionbody: .paragraph: p\r\n    \'refer to" +
                        "\r\n    a href=\'#_section_one\' Section One", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a cross reference using the target reftext", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Cross References")]
        [Xunit.TraitAttribute("Description", "Create a cross reference using the target reftext")]
        public virtual void CreateACrossReferenceUsingTheTargetReftext()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a cross reference using the target reftext", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 69
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 70
  testRunner.Given("the AsciiDoc source", "[reftext=\"the first section\"]\r\n== Section One\r\n\r\ncontent\r\n\r\n== Section Two\r\n\r\nref" +
                        "er to <<the first section>>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
  testRunner.When("it is converted to html", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
  testRunner.Then("the result should match the HTML source", ".sect1\r\n  h2#_section_one Section One\r\n  .sectionbody: .paragraph: p content\r\n.se" +
                        "ct1\r\n  h2#_section_two Section Two\r\n  .sectionbody: .paragraph: p\r\n    \'refer to" +
                        "\r\n    a href=\'#_section_one\' the first section", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a cross reference using the formatted target title", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Cross References")]
        [Xunit.TraitAttribute("Description", "Create a cross reference using the formatted target title")]
        public virtual void CreateACrossReferenceUsingTheFormattedTargetTitle()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a cross reference using the formatted target title", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 96
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
  testRunner.Given("the AsciiDoc source", "== Section *One*\r\n\r\ncontent\r\n\r\n== Section Two\r\n\r\nrefer to <<Section *One*>>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
  testRunner.When("it is converted to html", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
  testRunner.Then("the result should match the HTML source", @"<div class=""sect1"">
  <h2 id=""_section_strong_one_strong"">
    Section <strong>One</strong>
</h2>
<div class=""sectionbody"">
<div class=""paragraph"">
<p>content</p>
</div>
</div>
</div>
   <div class=""sect1"">
     <h2 id=""_section_two"">Section Two</h2>
<div class=""sectionbody"">
<div class=""paragraph"">
<p>refer to
       <a href=""#_section_strong_one_strong"">
         Section <strong>One</strong>
 </a>
</p>
  </div>
</div>
</div>", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CrossReferencesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CrossReferencesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
