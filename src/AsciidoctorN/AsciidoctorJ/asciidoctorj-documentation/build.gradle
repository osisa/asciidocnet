import org.apache.tools.ant.filters.*

jar.enabled = false

dependencies {
    testImplementation project(':asciidoctorj')
    testImplementation project(path: ':asciidoctorj-arquillian-extension')
    testImplementation "commons-io:commons-io:$commonsioVersion"
    testImplementation "org.jsoup:jsoup:$jsoupVersion"
    testImplementation("org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion") {
        transitive = false
    }
}

compileTestJava {
    // PrismJsHighlighterTest relies on Nashorn which is not supported anymore since Java 15
    // Either include it as an external library and configure the module path accordingly as it must be included via the module path
    // to run, or just exclude the test entirely. We're doing the latter, it's just a test.
    def javaMajorVersion = Integer.parseInt(System.getProperty('java.version').split("[.]")[0])
    if (javaMajorVersion >= 15) {
        exclude('**/PrismJsHighlighter*.java')
    }
}

task copyBaseExamplesToDocs(type: Copy) {
    group = 'documentation'

    from('src/test/java') {
        include '**/AsciidoctorInterface.java'
        include '**/OptionsTest.java'
        include '**/SimpleAsciidoctorRendering.java'

        include '**/converter/TextConverter.java'
        include '**/converter/TextConverterTest.java'
        include '**/converter/TextConverterRegistry.java'
    }
    from('src/test/resources/') {
        include 'converterregistry/META-INF/services/org.asciidoctor.jruby.converter.spi.ConverterRegistry'
    }

    into rootProject.file('docs/modules/ROOT/examples')
}

task copyExtensionsExamplesToDocs(type: Copy) {
    group = 'documentation'

    from('src/test/java') {
        include '**/extension/CommentPreprocessor.java'
        include '**/extension/ContextMenuInlineMacroProcessor.java'
        include '**/extension/CopyrightFooterPostprocessor.java'
        include '**/extension/GistBlockMacroProcessor.java'
        include '**/extension/ImageInlineMacroProcessor.java'
        include '**/extension/IssueInlineMacroProcessor.java'
        include '**/extension/KeyboardInlineMacroProcessor.java'
        include '**/extension/LsIncludeProcessor.java'
        include '**/extension/RobotsDocinfoProcessor.java'
        include '**/extension/TerminalCommandExtension.java'
        include '**/extension/TerminalCommandTreeprocessor.java'
        include '**/extension/YellBlockProcessor.java'

    }
    from('src/test/resources/') {
        include 'ast-demo.adoc'
        include 'ast-demo-result.txt'
        include 'comment.adoc'
        include 'comment-with-note.adoc'
        include 'gist-macro.adoc'
        include 'issue-inline-macro.adoc'
        include 'treeprocessorcontent.adoc'
        include 'treeprocessorresult.adoc'
        include 'yell-block.adoc'
        include 'yell-block-result.txt'

        include 'extensionregistry/META-INF/services/org.asciidoctor.jruby.extension.spi.ExtensionRegistry'
    }

    into rootProject.file('docs/modules/extensions/examples')
}

task copySyntaxHighlightingExamplesToDocs(type: Copy) {
    group = 'documentation'

    from('src/test/java') {
        include '**/syntaxhighlighter/HighlightJsExtension.java'
        include '**/syntaxhighlighter/HighlightJsHighlighter.java'
        include '**/syntaxhighlighter/HighlightJsHighlighterTest.java'
        include '**/syntaxhighlighter/HighlightJsWithLanguageHighlighter.java'
        include '**/syntaxhighlighter/HighlightJsWithOfflineStylesHighlighter.java'
        include '**/syntaxhighlighter/PrismJsHighlighter.java'
        include '**/syntaxhighlighter/PrismJsHighlighterTest.java'
        include '**/syntaxhighlighter/threeparams/HighlightJsHighlighter.java'
    }
    from('src/test/resources/') {
        include 'sources.adoc'
        include 'syntax-highlighting-order.adoc'
        include 'syntax-highlighting-order-output.txt'
        include 'syntaxhighlighterregistry/META-INF/services/org.asciidoctor.jruby.syntaxhighlighter.spi.SyntaxHighlighterRegistry'
    }

    into rootProject.file('docs/modules/syntax-highlighting/examples')
}

task copyAllExamplesToDocs {
    group = 'documentation'

    dependsOn copyBaseExamplesToDocs
    dependsOn copyExtensionsExamplesToDocs
    dependsOn copySyntaxHighlightingExamplesToDocs
}

build.dependsOn copyBaseExamplesToDocs

test.enabled = testClasses.enabled = JavaVersion.current().isJava7Compatible()

